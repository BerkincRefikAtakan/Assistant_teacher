// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: students.sql

package db

import (
	"context"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (class_id, name, surname)
VALUES ($1, $2, $3)
RETURNING id, class_id, name, surname, created_at
`

type CreateStudentParams struct {
	ClassID int64  `json:"class_id"`
	Name    string `json:"name"`
	Surname string `json:"surname"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent, arg.ClassID, arg.Name, arg.Surname)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.ClassID,
		&i.Name,
		&i.Surname,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students
WHERE id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteStudent, id)
	return err
}

const getStudents = `-- name: GetStudents :one
SELECT id, class_id, name, surname, created_at
FROM students
WHERE name = $1 AND surname = $2 AND class_id = $3
`

type GetStudentsParams struct {
	Name    string `json:"name"`
	Surname string `json:"surname"`
	ClassID int64  `json:"class_id"`
}

func (q *Queries) GetStudents(ctx context.Context, arg GetStudentsParams) (Student, error) {
	row := q.db.QueryRow(ctx, getStudents, arg.Name, arg.Surname, arg.ClassID)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.ClassID,
		&i.Name,
		&i.Surname,
		&i.CreatedAt,
	)
	return i, err
}

const getStudentsByClass = `-- name: GetStudentsByClass :many
SELECT id, class_id, name, surname, created_at
FROM students
WHERE class_id = $1
LIMIT $2 OFFSET $3
`

type GetStudentsByClassParams struct {
	ClassID int64 `json:"class_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) GetStudentsByClass(ctx context.Context, arg GetStudentsByClassParams) ([]Student, error) {
	rows, err := q.db.Query(ctx, getStudentsByClass, arg.ClassID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.ClassID,
			&i.Name,
			&i.Surname,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE students
SET class_id = $1, name = $2, surname = $3
WHERE id = $4
RETURNING id, class_id, name, surname, created_at
`

type UpdateStudentParams struct {
	ClassID int64  `json:"class_id"`
	Name    string `json:"name"`
	Surname string `json:"surname"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, updateStudent,
		arg.ClassID,
		arg.Name,
		arg.Surname,
		arg.ID,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.ClassID,
		&i.Name,
		&i.Surname,
		&i.CreatedAt,
	)
	return i, err
}
