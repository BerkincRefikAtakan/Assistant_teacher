// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: paragraphs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createParagraph = `-- name: CreateParagraph :one
INSERT INTO paragraphs (teacher_id, header, paragraph)
VALUES ($1, $2, $3)
RETURNING id, teacher_id, header, paragraph, created_at
`

type CreateParagraphParams struct {
	TeacherID int64       `json:"teacher_id"`
	Header    pgtype.Text `json:"header"`
	Paragraph pgtype.Text `json:"paragraph"`
}

func (q *Queries) CreateParagraph(ctx context.Context, arg CreateParagraphParams) (Paragraph, error) {
	row := q.db.QueryRow(ctx, createParagraph, arg.TeacherID, arg.Header, arg.Paragraph)
	var i Paragraph
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Header,
		&i.Paragraph,
		&i.CreatedAt,
	)
	return i, err
}

const deleteParagraph = `-- name: DeleteParagraph :exec
DELETE FROM paragraphs
WHERE teacher_id = $1 AND header=$2
`

type DeleteParagraphParams struct {
	TeacherID int64       `json:"teacher_id"`
	Header    pgtype.Text `json:"header"`
}

func (q *Queries) DeleteParagraph(ctx context.Context, arg DeleteParagraphParams) error {
	_, err := q.db.Exec(ctx, deleteParagraph, arg.TeacherID, arg.Header)
	return err
}

const getParagraphs = `-- name: GetParagraphs :one
SELECT id, teacher_id, header, paragraph, created_at
FROM paragraphs
WHERE teacher_id = $1 AND header=$2
`

type GetParagraphsParams struct {
	TeacherID int64       `json:"teacher_id"`
	Header    pgtype.Text `json:"header"`
}

func (q *Queries) GetParagraphs(ctx context.Context, arg GetParagraphsParams) (Paragraph, error) {
	row := q.db.QueryRow(ctx, getParagraphs, arg.TeacherID, arg.Header)
	var i Paragraph
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Header,
		&i.Paragraph,
		&i.CreatedAt,
	)
	return i, err
}

const getParagraphsByTeacher = `-- name: GetParagraphsByTeacher :many
SELECT id, teacher_id, header, paragraph, created_at
FROM paragraphs
WHERE teacher_id = $1
LIMIT $2 OFFSET $3
`

type GetParagraphsByTeacherParams struct {
	TeacherID int64 `json:"teacher_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetParagraphsByTeacher(ctx context.Context, arg GetParagraphsByTeacherParams) ([]Paragraph, error) {
	rows, err := q.db.Query(ctx, getParagraphsByTeacher, arg.TeacherID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Paragraph{}
	for rows.Next() {
		var i Paragraph
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.Header,
			&i.Paragraph,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParagraphOrAndHeader = `-- name: UpdateParagraphOrAndHeader :one
UPDATE paragraphs
SET  header = $1, paragraph = $2
WHERE id = $3
RETURNING id, teacher_id, header, paragraph, created_at
`

type UpdateParagraphOrAndHeaderParams struct {
	Header    pgtype.Text `json:"header"`
	Paragraph pgtype.Text `json:"paragraph"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateParagraphOrAndHeader(ctx context.Context, arg UpdateParagraphOrAndHeaderParams) (Paragraph, error) {
	row := q.db.QueryRow(ctx, updateParagraphOrAndHeader, arg.Header, arg.Paragraph, arg.ID)
	var i Paragraph
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Header,
		&i.Paragraph,
		&i.CreatedAt,
	)
	return i, err
}
