// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: paragraphs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createParagraph = `-- name: CreateParagraph :one
INSERT INTO paragraphs (teacher_id, header, paragraph)
VALUES ($1, $2, $3)
RETURNING id, teacher_id, header, paragraph, created_at
`

type CreateParagraphParams struct {
	TeacherID int64       `json:"teacher_id"`
	Header    pgtype.Text `json:"header"`
	Paragraph pgtype.Text `json:"paragraph"`
}

func (q *Queries) CreateParagraph(ctx context.Context, arg CreateParagraphParams) (Paragraph, error) {
	row := q.db.QueryRow(ctx, createParagraph, arg.TeacherID, arg.Header, arg.Paragraph)
	var i Paragraph
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Header,
		&i.Paragraph,
		&i.CreatedAt,
	)
	return i, err
}

const deleteParagraph = `-- name: DeleteParagraph :exec
DELETE FROM paragraphs
WHERE id = $1
`

func (q *Queries) DeleteParagraph(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteParagraph, id)
	return err
}

const getParagraphByID = `-- name: GetParagraphByID :one
SELECT id, teacher_id, header, paragraph, created_at
FROM paragraphs
WHERE id = $1
`

func (q *Queries) GetParagraphByID(ctx context.Context, id int64) (Paragraph, error) {
	row := q.db.QueryRow(ctx, getParagraphByID, id)
	var i Paragraph
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Header,
		&i.Paragraph,
		&i.CreatedAt,
	)
	return i, err
}

const getParagraphs = `-- name: GetParagraphs :many
SELECT id, teacher_id, header, paragraph, created_at
FROM paragraphs
`

func (q *Queries) GetParagraphs(ctx context.Context) ([]Paragraph, error) {
	rows, err := q.db.Query(ctx, getParagraphs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Paragraph{}
	for rows.Next() {
		var i Paragraph
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.Header,
			&i.Paragraph,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParagraphsByTeacher = `-- name: GetParagraphsByTeacher :many
SELECT id, teacher_id, header, paragraph, created_at
FROM paragraphs
WHERE teacher_id = $1
`

func (q *Queries) GetParagraphsByTeacher(ctx context.Context, teacherID int64) ([]Paragraph, error) {
	rows, err := q.db.Query(ctx, getParagraphsByTeacher, teacherID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Paragraph{}
	for rows.Next() {
		var i Paragraph
		if err := rows.Scan(
			&i.ID,
			&i.TeacherID,
			&i.Header,
			&i.Paragraph,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParagraph = `-- name: UpdateParagraph :one
UPDATE paragraphs
SET teacher_id = $1, header = $2, paragraph = $3
WHERE id = $4
RETURNING id, teacher_id, header, paragraph, created_at
`

type UpdateParagraphParams struct {
	TeacherID int64       `json:"teacher_id"`
	Header    pgtype.Text `json:"header"`
	Paragraph pgtype.Text `json:"paragraph"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateParagraph(ctx context.Context, arg UpdateParagraphParams) (Paragraph, error) {
	row := q.db.QueryRow(ctx, updateParagraph,
		arg.TeacherID,
		arg.Header,
		arg.Paragraph,
		arg.ID,
	)
	var i Paragraph
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Header,
		&i.Paragraph,
		&i.CreatedAt,
	)
	return i, err
}
