// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: teacher.sql

package db

import (
	"context"
)

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teachers (name, surname)
VALUES ($1, $2)
RETURNING id, name, surname, created_at
`

type CreateTeacherParams struct {
	Name    string `json:"name"`
	Surname string `json:"surname"`
}

func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) (Teacher, error) {
	row := q.db.QueryRow(ctx, createTeacher, arg.Name, arg.Surname)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTeacher = `-- name: DeleteTeacher :exec
DELETE FROM teachers
WHERE id = $1
`

func (q *Queries) DeleteTeacher(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTeacher, id)
	return err
}

const getTeacherByID = `-- name: GetTeacherByID :one
SELECT id, name, surname, created_at
FROM teachers
WHERE id = $1
`

func (q *Queries) GetTeacherByID(ctx context.Context, id int64) (Teacher, error) {
	row := q.db.QueryRow(ctx, getTeacherByID, id)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.CreatedAt,
	)
	return i, err
}

const getTeachers = `-- name: GetTeachers :many
SELECT id, name, surname, created_at
FROM teachers
`

func (q *Queries) GetTeachers(ctx context.Context) ([]Teacher, error) {
	rows, err := q.db.Query(ctx, getTeachers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Teacher{}
	for rows.Next() {
		var i Teacher
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeacher = `-- name: UpdateTeacher :one
UPDATE teachers
SET name = $1, surname = $2
WHERE id = $3
RETURNING id, name, surname, created_at
`

type UpdateTeacherParams struct {
	Name    string `json:"name"`
	Surname string `json:"surname"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateTeacher(ctx context.Context, arg UpdateTeacherParams) (Teacher, error) {
	row := q.db.QueryRow(ctx, updateTeacher, arg.Name, arg.Surname, arg.ID)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.CreatedAt,
	)
	return i, err
}
